/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package doxy;

import global.DoxyApp;
import global.MyVector;
import kit.FileKit;
import kit.UIKit;

import java.awt.Color;
import java.awt.Component;
import java.awt.GridBagLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.beans.PropertyVetoException;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Iterator;
import java.util.List;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.BorderFactory;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTree;
import javax.swing.Timer;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeCellRenderer;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreePath;
import javax.swing.tree.TreeSelectionModel;

/**
 *
 * @author Rendra
 */
public class Main extends javax.swing.JFrame {
    
    private String projectFolder;
    private String projectName;
    private DefaultMutableTreeNode rootNode;
    private DefaultTreeModel treeModel;
    private MyVector myVector;
    private List<String> recentProjects = new ArrayList<>();
    private String recentFile;
    private String baseOutputDir = "D:/Result/";
    
    /**
     * Creates new form Main
     */
    public Main() {
        initComponents();
        
        recentFile = getClass().getResource("/global/recent.txt").getPath();
        recentFile = recentFile.substring(1);
        recentFile = recentFile.replace("%20", " ");
        
        CustomizeUI();
        getRecentItems();
        
        // Show about section first
        FrmAbout frmAbout = new FrmAbout();
        MyDesktopPane.add(frmAbout);
        frmAbout.setLayout(new GridBagLayout());
        frmAbout.setVisible(true);
        frmAbout.setBorder(null);
        try {
            frmAbout.setMaximum(true);
            ((javax.swing.plaf.basic.BasicInternalFrameUI)frmAbout.getUI()).setNorthPane(null);
        } catch (PropertyVetoException pvx) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, pvx);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        MyToolbar = new javax.swing.JToolBar();
        TOpenProject = new javax.swing.JToggleButton();
        TRunProject = new javax.swing.JToggleButton();
        TSaveProject = new javax.swing.JToggleButton();
        MySplit = new javax.swing.JSplitPane();
        LeftSide = new javax.swing.JTabbedPane();
        TabExplorerProject = new javax.swing.JPanel();
        TreeScroll = new javax.swing.JScrollPane();
        MyTree = new javax.swing.JTree();
        TabRecentProject = new javax.swing.JPanel();
        RecentScroll = new javax.swing.JScrollPane();
        ListRecentProjects = new javax.swing.JList();
        RightSide = new javax.swing.JPanel();
        MyDesktopPane = new javax.swing.JDesktopPane();
        StatusPanel = new javax.swing.JPanel();
        LblTime = new javax.swing.JLabel();
        MainMenu = new javax.swing.JMenuBar();
        MProject = new javax.swing.JMenu();
        MILoadProject = new javax.swing.JMenuItem();
        MSepProject = new javax.swing.JPopupMenu.Separator();
        MFile = new javax.swing.JMenu();
        MIParseFile = new javax.swing.JMenuItem();
        MIParseTranslate = new javax.swing.JMenuItem();
        MSepFile = new javax.swing.JPopupMenu.Separator();
        MIRunProject = new javax.swing.JMenuItem();
        MIGenDocs = new javax.swing.JMenuItem();
        MISaveProject = new javax.swing.JMenuItem();
        MSepExit = new javax.swing.JPopupMenu.Separator();
        MIExit = new javax.swing.JMenuItem();
        MHelp = new javax.swing.JMenu();
        MIHowTo = new javax.swing.JMenuItem();
        MICheckUpdate = new javax.swing.JMenuItem();
        MIAbout = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Doxy - Make Your Project Documentation Sexy");
        setName("MainFrame"); // NOI18N
        setResizable(false);

        MyToolbar.setFloatable(false);
        MyToolbar.setRollover(true);

        TOpenProject.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/load_project_big.png"))); // NOI18N
        TOpenProject.setToolTipText("Load Project");
        TOpenProject.setFocusable(false);
        TOpenProject.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        TOpenProject.setMargin(new java.awt.Insets(2, 4, 2, 4));
        TOpenProject.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        TOpenProject.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TOpenProjectActionPerformed(evt);
            }
        });
        MyToolbar.add(TOpenProject);

        TRunProject.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/generate_doc_big.png"))); // NOI18N
        TRunProject.setToolTipText("Generate Docs");
        TRunProject.setEnabled(false);
        TRunProject.setFocusable(false);
        TRunProject.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        TRunProject.setMargin(new java.awt.Insets(2, 4, 2, 4));
        TRunProject.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        TRunProject.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TRunProjectActionPerformed(evt);
            }
        });
        MyToolbar.add(TRunProject);

        TSaveProject.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/save_as big.png"))); // NOI18N
        TSaveProject.setToolTipText("Save Project As");
        TSaveProject.setEnabled(false);
        TSaveProject.setFocusable(false);
        TSaveProject.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        TSaveProject.setMargin(new java.awt.Insets(2, 4, 2, 4));
        TSaveProject.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        MyToolbar.add(TSaveProject);

        MySplit.setBorder(null);
        MySplit.setDividerLocation(230);
        MySplit.setDividerSize(3);

        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("root");
        MyTree.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        MyTree.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                MyTreeMouseClicked(evt);
            }
        });
        TreeScroll.setViewportView(MyTree);

        javax.swing.GroupLayout TabExplorerProjectLayout = new javax.swing.GroupLayout(TabExplorerProject);
        TabExplorerProject.setLayout(TabExplorerProjectLayout);
        TabExplorerProjectLayout.setHorizontalGroup(
            TabExplorerProjectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(TreeScroll, javax.swing.GroupLayout.DEFAULT_SIZE, 225, Short.MAX_VALUE)
        );
        TabExplorerProjectLayout.setVerticalGroup(
            TabExplorerProjectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(TreeScroll, javax.swing.GroupLayout.DEFAULT_SIZE, 419, Short.MAX_VALUE)
        );

        LeftSide.addTab("Project Explorer", TabExplorerProject);

        ListRecentProjects.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ListRecentProjectsMouseClicked(evt);
            }
        });
        RecentScroll.setViewportView(ListRecentProjects);

        javax.swing.GroupLayout TabRecentProjectLayout = new javax.swing.GroupLayout(TabRecentProject);
        TabRecentProject.setLayout(TabRecentProjectLayout);
        TabRecentProjectLayout.setHorizontalGroup(
            TabRecentProjectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(RecentScroll, javax.swing.GroupLayout.DEFAULT_SIZE, 225, Short.MAX_VALUE)
        );
        TabRecentProjectLayout.setVerticalGroup(
            TabRecentProjectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(RecentScroll, javax.swing.GroupLayout.DEFAULT_SIZE, 419, Short.MAX_VALUE)
        );

        LeftSide.addTab("Recent Projects", TabRecentProject);

        MySplit.setLeftComponent(LeftSide);

        MyDesktopPane.setBackground(new java.awt.Color(240, 240, 240));

        javax.swing.GroupLayout RightSideLayout = new javax.swing.GroupLayout(RightSide);
        RightSide.setLayout(RightSideLayout);
        RightSideLayout.setHorizontalGroup(
            RightSideLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(MyDesktopPane, javax.swing.GroupLayout.DEFAULT_SIZE, 567, Short.MAX_VALUE)
        );
        RightSideLayout.setVerticalGroup(
            RightSideLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(MyDesktopPane, javax.swing.GroupLayout.DEFAULT_SIZE, 447, Short.MAX_VALUE)
        );

        MySplit.setRightComponent(RightSide);

        StatusPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        LblTime.setText("...");

        javax.swing.GroupLayout StatusPanelLayout = new javax.swing.GroupLayout(StatusPanel);
        StatusPanel.setLayout(StatusPanelLayout);
        StatusPanelLayout.setHorizontalGroup(
            StatusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, StatusPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(LblTime)
                .addContainerGap())
        );
        StatusPanelLayout.setVerticalGroup(
            StatusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(StatusPanelLayout.createSequentialGroup()
                .addComponent(LblTime)
                .addGap(0, 11, Short.MAX_VALUE))
        );

        MProject.setText("Project");

        MILoadProject.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/load_project.png"))); // NOI18N
        MILoadProject.setText("Load Project");
        MILoadProject.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MILoadProjectActionPerformed(evt);
            }
        });
        MProject.add(MILoadProject);
        MProject.add(MSepProject);

        MFile.setText("File");

        MIParseFile.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/parse_file.png"))); // NOI18N
        MIParseFile.setText("Parse File");
        MIParseFile.setEnabled(false);
        MIParseFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MIParseFileActionPerformed(evt);
            }
        });
        MFile.add(MIParseFile);

        MIParseTranslate.setText("Parse & Translate");
        MIParseTranslate.setEnabled(false);
        MIParseTranslate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MIParseTranslateActionPerformed(evt);
            }
        });
        MFile.add(MIParseTranslate);

        MProject.add(MFile);
        MProject.add(MSepFile);

        MIRunProject.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/run_project.png"))); // NOI18N
        MIRunProject.setText("Translate Project");
        MIRunProject.setEnabled(false);
        MIRunProject.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MIRunProjectActionPerformed(evt);
            }
        });
        MProject.add(MIRunProject);

        MIGenDocs.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/generate_doc.png"))); // NOI18N
        MIGenDocs.setText("Generate Documentation");
        MIGenDocs.setEnabled(false);
        MIGenDocs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MIGenDocsActionPerformed(evt);
            }
        });
        MProject.add(MIGenDocs);

        MISaveProject.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/save_as.png"))); // NOI18N
        MISaveProject.setText("Save Project As");
        MISaveProject.setEnabled(false);
        MProject.add(MISaveProject);
        MProject.add(MSepExit);

        MIExit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/exit.png"))); // NOI18N
        MIExit.setText("Exit");
        MIExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MIExitActionPerformed(evt);
            }
        });
        MProject.add(MIExit);

        MainMenu.add(MProject);

        MHelp.setText("Help");

        MIHowTo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/support.png"))); // NOI18N
        MIHowTo.setText("How To Use");
        MIHowTo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MIHowToActionPerformed(evt);
            }
        });
        MHelp.add(MIHowTo);

        MICheckUpdate.setText("Check For Update");
        MICheckUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MICheckUpdateActionPerformed(evt);
            }
        });
        MHelp.add(MICheckUpdate);

        MIAbout.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/about.png"))); // NOI18N
        MIAbout.setText("About");
        MIAbout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MIAboutActionPerformed(evt);
            }
        });
        MHelp.add(MIAbout);

        MainMenu.add(MHelp);

        setJMenuBar(MainMenu);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(MyToolbar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(MySplit)
            .addComponent(StatusPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(MyToolbar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(MySplit, javax.swing.GroupLayout.PREFERRED_SIZE, 447, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(StatusPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void MILoadProjectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MILoadProjectActionPerformed
        // TODO add your handling code here:
        JFileChooser chooser;
        String choosertitle = "Choose a Root Project Directory";
        chooser = new JFileChooser();
        chooser.setCurrentDirectory(new java.io.File("."));
        chooser.setDialogTitle(choosertitle);
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        chooser.setAcceptAllFileFilterUsed(false);
        if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            //System.out.println("getCurrentDirectory(): " + chooser.getCurrentDirectory());
            //System.out.println("getSelectedFile() : " + chooser.getSelectedFile());
            DoxyApp.bridge.setFromRecent(false);
            projectFolder = chooser.getSelectedFile().getAbsolutePath();
            drawSrcTree();
        }
    }//GEN-LAST:event_MILoadProjectActionPerformed

    private void TOpenProjectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TOpenProjectActionPerformed
        // TODO add your handling code here:
        MILoadProjectActionPerformed(evt);
    }//GEN-LAST:event_TOpenProjectActionPerformed

    private void MIExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MIExitActionPerformed
        // TODO add your handling code here:
        try {            
            Thread.sleep(200);
        } catch (InterruptedException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
        System.exit(1);
    }//GEN-LAST:event_MIExitActionPerformed

    private void MIRunProjectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MIRunProjectActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_MIRunProjectActionPerformed

    private void MIParseFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MIParseFileActionPerformed
        // TODO add your handling code here:
        clearDesktopPane();
        FrmSrcList frameSrc = new FrmSrcList(this, true);
        frameSrc.setVisible(true);
        
        if (DoxyApp.bridge.isFileChoosen()) {
            FrmParseFile frmParse = new FrmParseFile();
            MyDesktopPane.add(frmParse);
            frmParse.setVisible(true);
            frmParse.setBorder(null);
            try {
                frmParse.setMaximum(true);
                ((javax.swing.plaf.basic.BasicInternalFrameUI)frmParse.getUI()).setNorthPane(null);
            } catch (PropertyVetoException pvx) {
                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, pvx);
            }
        }
    }//GEN-LAST:event_MIParseFileActionPerformed

    private void MIParseTranslateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MIParseTranslateActionPerformed
        // TODO add your handling code here:
        clearDesktopPane();
        FrmSrcList frameSrc = new FrmSrcList(this, true);
        frameSrc.setVisible(true);
        
        try {
            FrmParseTranslate frmParse = new FrmParseTranslate();
            MyDesktopPane.add(frmParse);
            frmParse.setVisible(true);
            frmParse.setBorder(null);
            try {
                frmParse.setMaximum(true);
                ((javax.swing.plaf.basic.BasicInternalFrameUI)frmParse.getUI()).setNorthPane(null);
            } catch (PropertyVetoException pvx) {
                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, pvx);
            }
        } catch (Exception ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_MIParseTranslateActionPerformed

    private void ListRecentProjectsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ListRecentProjectsMouseClicked
        // TODO add your handling code here:
        if (evt.getClickCount()==2) {
            projectFolder = ListRecentProjects.getSelectedValue().toString();
            DoxyApp.bridge.setFromRecent(true);
            drawSrcTree();
            LeftSide.setSelectedIndex(0);
        }
    }//GEN-LAST:event_ListRecentProjectsMouseClicked

    private void MIGenDocsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MIGenDocsActionPerformed
        // TODO add your handling code here:
        MyVector allFiles   = DoxyApp.bridge.getListSources();
        String fileListName = "src.lst";
        String outputDocDir = "docs";
        String workingDir   = baseOutputDir+projectName;
        try {
            File nwFile = new File(workingDir+"/"+fileListName);
            if(!nwFile.exists())
                nwFile.createNewFile();
            FileKit.writeTextFile(allFiles, workingDir+"/"+fileListName);
            
            String[] cmd = {
                "javadoc", 
                "-docletpath", DoxyApp.doxletpath, 
                "-doclet", DoxyApp.doxlet,
                "-generatesources",
                "-paresecomments",
                "-title", DoxyApp.myAppName, 
                "-hdf", "project.name", projectName, 
                "-XDignore.symbol.file", 
                "-d", workingDir+"\\"+outputDocDir, 
                "@"+workingDir+"\\"+fileListName
            }; 
            Runtime.getRuntime().exec(cmd);
            JOptionPane.showMessageDialog(null, "Docs of this project created successfully."+
                    "\nCheck docs in "+workingDir+"/"+outputDocDir, "Information", 
                    JOptionPane.INFORMATION_MESSAGE);
            
            // Logging
            /**
            Process child = Runtime.getRuntime().exec(cmd);
            String line = "";
            BufferedReader dis = new BufferedReader( new InputStreamReader(child.getInputStream()));
            while ((line = dis.readLine()) != null) {
                System.out.println("Line: " + line);
            }
            dis.close();
            **/
        } catch (IOException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_MIGenDocsActionPerformed

    private void TRunProjectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TRunProjectActionPerformed
        // TODO add your handling code here:
        MIRunProjectActionPerformed(evt);
    }//GEN-LAST:event_TRunProjectActionPerformed

    private void MIHowToActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MIHowToActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_MIHowToActionPerformed

    private void MICheckUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MICheckUpdateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_MICheckUpdateActionPerformed

    private void MIAboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MIAboutActionPerformed
        // TODO add your handling code here:
        clearDesktopPane();
        FrmAbout frmAbout = new FrmAbout();
        MyDesktopPane.add(frmAbout);
        frmAbout.setLayout(new GridBagLayout());
        frmAbout.setVisible(true);
        frmAbout.setBorder(null);
        try {
            frmAbout.setMaximum(true);
            ((javax.swing.plaf.basic.BasicInternalFrameUI)frmAbout.getUI()).setNorthPane(null);
        } catch (PropertyVetoException pvx) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, pvx);
        }
    }//GEN-LAST:event_MIAboutActionPerformed

    private void MyTreeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_MyTreeMouseClicked
        // TODO add your handling code here:
        if (evt.getClickCount()==2) {
            TreePath tp = MyTree.getPathForLocation(evt.getX(), evt.getY());
            if (tp != null) {
                String fullPath = tp.toString().replace("[", "").replace(" ", "");
                fullPath = fullPath.replace("]", "");
                fullPath = fullPath.replace(",", "\\");
                DoxyApp.bridge.setSelectedSrcFile(fullPath);
                
                clearDesktopPane();
                FrmParseFile frmParse = new FrmParseFile();
                MyDesktopPane.add(frmParse);
                frmParse.setVisible(true);
                frmParse.setBorder(null);
                try {
                    frmParse.setMaximum(true);
                    ((javax.swing.plaf.basic.BasicInternalFrameUI)frmParse.getUI()).setNorthPane(null);
                } catch (PropertyVetoException pvx) {
                    Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, pvx);
                }
            }
        }
    }//GEN-LAST:event_MyTreeMouseClicked

    public static void pipeStream(InputStream input, OutputStream output) throws IOException {
        byte buffer[] = new byte[1024];
        int numRead = 0;
        do {
            numRead = input.read(buffer);
            output.write(buffer, 0, numRead);
        } while (input.available() > 0);
        output.flush();
    }
    
    /**
     * Customize GUI :
     * Set root node of the tree disappear if no project selected
     * Set padding the components
     * Create top border of the status panel (bottom panel)
     */
    private void CustomizeUI(){
        LblTime.setBorder(BorderFactory.createEmptyBorder(4, 0, 0, 0));
        showDateTime();
        MyTree.setRootVisible(false);
        UIKit.flattenSplitPane(MySplit);
        
        // Set the left side panel width to static when frame resized
        this.addComponentListener(new ComponentAdapter() {
            @Override
            public void componentResized(ComponentEvent e) {
                MySplit.setDividerLocation(200);
            }
        });
        
        // Set padding the split pane
        LeftSide.setBorder(BorderFactory.createEmptyBorder(3, 3, 3, 0));
        RightSide.setBorder(BorderFactory.createEmptyBorder(0, 3, 3, 3));
        MyDesktopPane.setBorder(BorderFactory.createEmptyBorder(3, 3, 3, 3));
        MyToolbar.setBorder(BorderFactory.createEmptyBorder(3, 3, 3, 3));
        ListRecentProjects.setBorder(BorderFactory.createEmptyBorder(3, 3, 3, 3));
        RecentScroll.setBorder(BorderFactory.createEmptyBorder(1, 1, 1, 1));
        MyTree.setBorder(BorderFactory.createEmptyBorder(2, 2, 2, 2));
        TabExplorerProject.setBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5));
        
        // Create top border the status panel
        StatusPanel.setBorder(BorderFactory.createMatteBorder(1, 0, 0, 0, Color.GRAY));
    }
    
    /*
     * Clear the desktop pane from loaded JInternalFrame
     */
    private void clearDesktopPane(){
        MyDesktopPane.removeAll();
        MyDesktopPane.repaint();
    }
    
    /**
     * Enable / disable components (MenuItem & ToogleButtons)
     * 
     * @param enable 
     */
    private void enableMenuItems(boolean enable){
        MIRunProject.setEnabled(enable);
        MIParseFile.setEnabled(enable);
        MIParseTranslate.setEnabled(enable);
        MIGenDocs.setEnabled(enable);
        MISaveProject.setEnabled(enable);
        
        TRunProject.setEnabled(enable);
        TSaveProject.setEnabled(enable);
    }
    
    private void getRecentItems() {
        try {
            recentProjects = FileKit.readTextFile(recentFile);
            Vector<String> recentItems = new Vector<>();
            recentItems.addAll(recentProjects);
            ListRecentProjects.setListData(recentItems);
        } catch (IOException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void addRecentItems() {
        if(recentProjects.size()==10) {
            recentProjects.remove(recentProjects.size()-1);
        }
        try {
            List<String> newItem = new ArrayList<>();
            newItem.add(projectFolder);
            clearDuplicateRecent();
            newItem.addAll(recentProjects);
            FileKit.writeTextFile(newItem, recentFile);
        } catch (IOException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void clearDuplicateRecent() {
        Iterator<String> itr = recentProjects.iterator();
        while (itr.hasNext()) {
            String old = itr.next();
            if (old.equals(projectFolder)) {
                itr.remove();
            }
        }
    }
    
    private void drawSrcTree() {
        String [] splitPath = (projectFolder.replaceAll("\\\\", "/")).split("/");
        projectName = splitPath[splitPath.length-1];
        
        if (!DoxyApp.bridge.isFromRecent()) {
            // Backup first
            // No editting in original project
            File srcDir = new File(projectFolder);
            File dstDir = new File(baseOutputDir+projectName);
            try{
                FileKit.copyFolder(srcDir, dstDir);
                // Rewrite opened project
                projectFolder = baseOutputDir+projectName;
            }catch(IOException e){ }
        }
        DoxyApp.workPath = projectFolder;
            
        // Set JTree directory browser
        MyTree.setRootVisible(true);
        File file = new File(projectFolder);
        rootNode = new DefaultMutableTreeNode(file.getAbsolutePath());
        treeModel = new DefaultTreeModel(rootNode);
        MyTree.setModel(treeModel);
        
        myVector = FileKit.getFileDirectory(file);
        JTree.DynamicUtilTreeNode.createChildren(rootNode, myVector);

        // Set sub icon JTree
        Icon srcIcon = new ImageIcon(getClass().getResource("/assets/file_extension_jar.png"));
        MyTree.setCellRenderer(new DefaultTreeCellRenderer(){
            @Override
            public Component getTreeCellRendererComponent(final JTree tree, Object value, boolean sel,
                    boolean expanded, boolean leaf, int row, boolean hasFocus){
                JLabel label = (JLabel)super.getTreeCellRendererComponent(tree, value, sel, 
                        expanded, leaf, row, hasFocus);  
              if(((DefaultMutableTreeNode)value).isRoot())
                  label.setIcon(new ImageIcon(getClass().getResource("/assets/application.png")));
              return label;  
            } 
        });
        DefaultTreeCellRenderer renderer = (DefaultTreeCellRenderer) MyTree.getCellRenderer();
        renderer.setLeafIcon(srcIcon);
        MyTree.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);

        for (int i=0;i<MyTree.getRowCount();i++) {  
            MyTree.expandRow(i);  
        } 
        enableMenuItems(true);
        addRecentItems();
    }
    
    private void showDateTime() {
        final DateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
        int timeDelay = 1000;
        ActionListener time;
        time = new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent evt) {
                Calendar now = Calendar.getInstance();                
                LblTime.setText("Current time : " + dateFormat.format(now.getTime()));
            }
        };
        new Timer(timeDelay, time).start();
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new Main().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel LblTime;
    private javax.swing.JTabbedPane LeftSide;
    private javax.swing.JList ListRecentProjects;
    private javax.swing.JMenu MFile;
    private javax.swing.JMenu MHelp;
    private javax.swing.JMenuItem MIAbout;
    private javax.swing.JMenuItem MICheckUpdate;
    private javax.swing.JMenuItem MIExit;
    private javax.swing.JMenuItem MIGenDocs;
    private javax.swing.JMenuItem MIHowTo;
    private javax.swing.JMenuItem MILoadProject;
    private javax.swing.JMenuItem MIParseFile;
    private javax.swing.JMenuItem MIParseTranslate;
    private javax.swing.JMenuItem MIRunProject;
    private javax.swing.JMenuItem MISaveProject;
    private javax.swing.JMenu MProject;
    private javax.swing.JPopupMenu.Separator MSepExit;
    private javax.swing.JPopupMenu.Separator MSepFile;
    private javax.swing.JPopupMenu.Separator MSepProject;
    private javax.swing.JMenuBar MainMenu;
    private javax.swing.JDesktopPane MyDesktopPane;
    private javax.swing.JSplitPane MySplit;
    private javax.swing.JToolBar MyToolbar;
    private javax.swing.JTree MyTree;
    private javax.swing.JScrollPane RecentScroll;
    private javax.swing.JPanel RightSide;
    private javax.swing.JPanel StatusPanel;
    private javax.swing.JToggleButton TOpenProject;
    private javax.swing.JToggleButton TRunProject;
    private javax.swing.JToggleButton TSaveProject;
    private javax.swing.JPanel TabExplorerProject;
    private javax.swing.JPanel TabRecentProject;
    private javax.swing.JScrollPane TreeScroll;
    // End of variables declaration//GEN-END:variables
}
